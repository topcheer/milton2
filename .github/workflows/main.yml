# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest


    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      - name: Java Maven release
        # You may pin to the exact commit or the version.
        # uses: qcastel/github-actions-maven-release@8db2f7e711f53486d5397fa97262add04a098473
        uses: qcastel/github-actions-maven-release@v1.12.12
        env:
          JAVA_HOME: /usr/lib/jvm/java-17-openjdk/
        with:
          # Maven server repository id to push the artifacts to
          maven-repo-server-id: dian
          # Maven server repository username
          maven-repo-server-username: ${{secrets.REPO_USER}}
          # Maven server repository password
          maven-repo-server-password: ${{secrets.REPO_PASSWORD}}
          # The maven arguments for the release
          # The ID of your registry. For example, for docker hub, it is `registry.hub.docker.com`
          docker-registry-id: registry.hub.docker.com
          # The username for your docker registry
          docker-registry-username: ${{secrets.DOCKER_USER}}
          # The password for your docker registry
          docker-registry-password: ${{secrets.DOCKER_TOKEN}}
          access-token: ${{secrets.GITHUB_TOKEN}}
          maven-args: "-Dmaven.javadoc.skip=true -DskipTests -DskipITs -Ddockerfile.skip -DdockerCompose.skip"
