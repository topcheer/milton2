# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest


    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
      - name: Setup Java JDK
        uses: actions/setup-java@v2.4.0
        with:
          # The Java version to set up. Takes a whole or semver Java version. See examples of supported syntax in README file
          java-version: 11
          distribution: temurin

      - name: Maven Release and Publish
        # You may pin to the exact commit or the version.
        # uses: mg-smartrent/github-actions-maven-release@5f387c0d77b22da293e9812d43ab90cdc49f475a
        uses: mg-smartrent/github-actions-maven-release@v1.5
        with:
          # Maven server repository username
          maven-repo-server-id: dian
          maven-repo-server-username: ${{ secrets.REPO_USER }}
          # Maven server repository password
          maven-repo-server-password: ${{ secrets.REPO_PASSWORD }}
          # The git user name for commiting the release
          git-release-bot-name: "git-action"
          # The git user email for commiting the release
          git-release-bot-email: "topcheer@me.com"
          # Github access token. https://help.github.com/en/github/authenticating-to-github/creating-a-personal-access-token-for-the-command-line
          access-token: ${{ secrets.GITHUB_TOKEN }}
          # Inject arguments in mvn docker build and push.
          # Publish the released artifact to GitHub Packages
          maven-release-publish: true
          # Publish the new post release snapshot artifact to GitHub Packages
          maven-snapshot-publish: true
          # Inject arguments in mvn publish command, ex: -Dskip.unit.tests=true - to skip the tests
          maven-publish-args: "-DskipTests=true"
          # Build and Push docker image of the released version.
          maven-release-push-docker: true
          # Build and Push docker image of the new post release snapshot version.
          maven-snapshot-push-docker: true
          # Inject arguments in mvn docker build and push.
          # Docker registry username
          maven-docker-user: ${{ secrets.DOCKER_USER }}
          # Docker registry password our auth token
          maven-docker-password: ${{ secrets.DOCKER_TOKEN }}

